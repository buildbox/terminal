#!/usr/bin/env ruby

$:.unshift(File.join(File.expand_path(File.dirname(__FILE__)), '..', 'lib'))

require 'terminal'
require 'benchmark/ips'
require 'timeout'
require 'net/http'
require 'tempfile'


def benchmark(bm, file)
  output = File.read(file)
  basename = File.basename(file)

  # Performance as it is via the gem
  bm.report "#{basename}" do
    Timeout.timeout(100) do
      Terminal.render(output, ansi2html_path: './ansi2html')
    end
  end

  # run the go command directly so we can see how much time the emoji & ruby prep takes
  bm.report "#{basename} gocmd" do
    IO.popen("./ansi2html", 'r+') do |p|
      p.write(output)
      p.close_write
      f = p.read
      raise unless f.length > (output.length / 2)
    end
  end

  # pipe from ruby to go for the fastest possible run
  conn = Net::HTTP.start('localhost', 1337)
  bm.report "#{basename} http" do
    resp = conn.request_post('/terminal', output)
    raise resp.code unless resp.code == "200"
  end
end

system "go build cmd/ansi2html/ansi2html.go"
terminal_pid = spawn "./ansi2html -http=:1337", out: "/dev/null"
sleep 1
Process.detach terminal_pid
begin
  Benchmark.ips do |bm|
    if ARGV[0]
      benchmark(bm, ARGV[0])
    else
      Dir.glob("fixtures/*.raw").each do |file|
        benchmark(bm, file)
      end
    end
  end
ensure
  Process.kill "TERM", terminal_pid
end
